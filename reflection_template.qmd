---
title: "STAT 331 Portfolio"
author: "Daniel Bush"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

surveys <- read_csv(here::here("data","surveys.csv"),
                    show_col_types = FALSE)

# This code came from lab 2 question 1


teachers <- read_csv(here::here("data",
                                "teacher_evals.csv"),
                    show_col_types = FALSE)

# This code is from lab 3 question 2

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191)

# This code is from practice activity 4 question 1
```

-   `txt`

```{r}
#| label: wd-1-txt

ages_tab <- read_table (file = here::here("Week 2", "Check-ins", "Ages_Data", "ages_tab.txt"))

# This code is from check in 2.3
```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

teacher_evals_clean <- teachers |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         gender) |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(teacher_id = as.character(teacher_id),
         seniority = as.character(seniority))

# This code came from question 5 lab 3


```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarise(mean_score = mean(percent_failed_cur)) |>
  arrange(desc(mean_score)) |>
  slice(c(1, n()))

#This code cem from lab 3 question 11
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

get_fit_now_member |>
  full_join(get_fit_now_check_in,
            by = join_by("id" == "membership_id")) |>
  filter(membership_status == "gold",
         check_in_date == "20180109",
         str_detect(id, "48Z")) |>
  inner_join(person, by = join_by(person_id == id)) |>
  inner_join(drivers_license, join_by(license_id == id)) |>
  filter(str_detect(plate_number, "H42W"))

# This code came from lab 5 "get fit now gym"
```

-   factor

```{r}
#| label: wd-3-factor



```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date



```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric


```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", "Colusa", "Del Norte", "Glenn", "Humboldt", "Lassen", "Modoc", "Plumas", "Shasta", "Sierra", "Siskiyou", "Tehama", "Trinity"),
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "Napa", "San Francisco", "San Mateo", "Santa Clara", "Solano", "Sonoma"),
                               "Northern San Joaquin Valley" = c("San Joaquin", "Stanislaus", "Merced"),
                               "Sacramento Area" = c("El Dorado", "Placer", "Sacramento", "Sutter", "Yolo", "Yuba"),
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               "Northern California & Central Sierra" = c("Alpine", "Amador", "Calaveras", "Inyo", "Mariposa", "Mono", "Nevada", "Tuolumne"),
                               "Southern California" = c("Los Angeles", "Orange", "Riverside", "San Bernardino", "San Diego", "Imperial"),
                               "Central Valley" = c("Fresno", "Kern", "Kings", "Madera", "Tulare"),
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               "San Diego Area" = c("San Diego", "Imperial")
  ))

# This code is form lab 4 question 3
```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               "Superior California" = c("Butte", "Colusa", "Del Norte", "Glenn", "Humboldt", "Lassen", "Modoc", "Plumas", "Shasta", "Sierra", "Siskiyou", "Tehama", "Trinity"),
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "Napa", "San Francisco", "San Mateo", "Santa Clara", "Solano", "Sonoma"),
                               "Northern San Joaquin Valley" = c("San Joaquin", "Stanislaus", "Merced"),
                               "Sacramento Area" = c("El Dorado", "Placer", "Sacramento", "Sutter", "Yolo", "Yuba"),
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               "Northern California & Central Sierra" = c("Alpine", "Amador", "Calaveras", "Inyo", "Mariposa", "Mono", "Nevada", "Tuolumne"),
                               "Southern California" = c("Los Angeles", "Orange", "Riverside", "San Bernardino", "San Diego", "Imperial"),
                               "Central Valley" = c("Fresno", "Kern", "Kings", "Madera", "Tulare"),
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               "San Diego Area" = c("San Diego", "Imperial")
  ))
# This code came from lab 4 question 3 
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

get_fit_now_member |>
  full_join(get_fit_now_check_in,
            by = join_by("id" == "membership_id")) |>
  filter(membership_status == "gold",
         check_in_date == "20180109",
         str_detect(id, "48Z")) |>
  inner_join(person, by = join_by(person_id == id)) |>
  inner_join(drivers_license, join_by(license_id == id)) |>
  filter(str_detect(plate_number, "H42W"))

# This code came from lab 5 "get fit now gym"

```

-   `full_join()`

```{r}
#| label: wd-5-full


get_fit_now_member |>
  full_join(get_fit_now_check_in,
            by = join_by("id" == "membership_id")) |>
  filter(membership_status == "gold",
         check_in_date == "20180109",
         str_detect(id, "48Z")) |>
  inner_join(person, by = join_by(person_id == id)) |>
  inner_join(drivers_license, join_by(license_id == id)) |>
  filter(str_detect(plate_number, "H42W"))

# This code came from lab 5 "get fit now gym"

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

ca_childcare %>%
  pivot_longer(cols = mc_infant: mc_preschool,
               names_to = "type_childcare",
               values_to = "median_price") %>%
  mutate(age_group = case_when(
    type_childcare == "mc_infant" ~ "Infant",
    type_childcare == "mc_toddler" ~ "Toddler",
    type_childcare == "mc_preschool" ~ "Preschooler"),
    Region = factor(region, 
                        levels = c("San Francisco Bay Area", 
                                            "Orange County", 
                                            "Los Angeles County", 
                                            "Northern San Joaquin Valley", 
                                            "Central Coast", 
                                            "Inland Empire", 
                                            "Superior California", 
                                            "Southern San Joaquin Valley", 
                                            "San Diego - Imperial", 
                                            "North Coast")))
  
# This code came from lab 4 question 6

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

ca_childcare %>%
  filter(study_year == 2008 |
         study_year == 2018) %>%
  group_by(region, study_year) %>%
  summarise(median_income =  median(mhi_2018)) %>%
  pivot_wider(names_from = study_year,
              values_from = median_income) %>%
  arrange(by = "2018")

#This code came from lab 4 question 4
  
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

#| label: boxplot
#| echo: true
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_jitter(color = "orange3", alpha = 0.25) + #reducing opacity of the points
  geom_boxplot(outliers = FALSE) + 
  labs(x = "Species",  #labeling axes
       y = NULL, 
       title = "Boxplot of Species vs Weight",
       subtitle = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45) ) + #tilting the x-axis 
  theme(axis.text.y = element_text(angle = 45 )) #tilting the y-axis

#http://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels

#This code came from lab 2 question 8, the comments were added after the initial submission

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(mean_score = mean(SET_score_avg)) |>
  arrange(desc(mean_score)) |>
  slice(c(1, n()))

# This code came from lab 3 question 10

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

ca_childcare %>%
  filter(study_year == 2018) %>%
  group_by(region) %>%
  summarise(median_price = median(mc_infant)) %>%
  slice_min(order_by = median_price)

# This code is from lab 4 question 5

```

-   Example of function stops

```{r}
#| label: r-3-function-stops



```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = hindfoot_length)) + 
  geom_point(alpha = 0.5) +
  facet_wrap(~species) + 
  labs(x = "Weight (g)", 
        y = NULL,
        title = "Change in Hindfoot Length (mm) By Weight",
        subtitle = "Hindfoot Length (mm)")

# This code came from lab 2 question 4
```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

ca_childcare %>%
  pivot_longer(cols = mc_infant: mc_preschool,
               names_to = "type_childcare",
               values_to = "median_price") %>%
  mutate(age_group = case_when(
    type_childcare == "mc_infant" ~ "Infant",
    type_childcare == "mc_toddler" ~ "Toddler",
    type_childcare == "mc_preschool" ~ "Preschooler"),
    Region = factor(region, 
                        levels = c("San Francisco Bay Area", 
                                            "Orange County", 
                                            "Los Angeles County", 
                                            "Northern San Joaquin Valley", 
                                            "Central Coast", 
                                            "Inland Empire", 
                                            "Superior California", 
                                            "Southern San Joaquin Valley", 
                                            "San Diego - Imperial", 
                                            "North Coast")))  %>%
             
ggplot(aes(x = study_year,
           y = median_price,
           color = region)) +
  geom_point() + 
  geom_smooth() +
  facet_wrap(~type_childcare,
             nrow = 1) + 
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)") +
  theme(axis.text.x = element_text(size = 5))
            
# This code came from lab 4 question 6 

edit graph 
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level,
                     fill = SET_level)) +
  geom_bar() +
  labs(x = "Seniority of Instructor",
       y = "",
       subtitle = "Number of Sections") +
scale_fill_manual(values = c("excellent" = "steelblue",
                             "standard" = "orange")) 

#This code came from challenge 3

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date


```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_jitter(color = "orange3", alpha = 0.25) + #reducing opacity of the points
  geom_boxplot(outliers = FALSE) + 
  labs(x = "Species",  #labeling axes
       y = NULL, 
       title = "Boxplot of Species vs Weight",
       subtitle = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45) ) + #tilting the x-axis 
  theme(axis.text.y = element_text(angle = 45 )) #tilting the y-axis

#http://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels

#This code came from lab 2 question 8, the comments were added after the initial submission


```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_jitter(color = "orange3", alpha = 0.25) + #reducing opacity of the points
  geom_boxplot(outliers = FALSE) + 
  labs(x = "Species",  #labeling axes
       y = NULL, 
       title = "Boxplot of Species vs Weight",
       subtitle = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45) ) + #tilting the x-axis 
  theme(axis.text.y = element_text(angle = 45 )) #tilting the y-axis

#http://www.sthda.com/english/wiki/ggplot2-axis-ticks-a-guide-to-customize-tick-marks-and-labels

#This code came from lab 2 question 8, the comments were added after the initial submission

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
 
ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level,
                     fill = SET_level)) +
  geom_bar() +
  labs(x = "Seniority of Instructor",
       y = "",
       subtitle = "Number of Sections") +
scale_fill_manual(values = c("excellent" = "steelblue",
                             "standard" = "orange")) 

#This code came from challenge 3


```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_jitter(color = "orange3", alpha = 0.25) +
  geom_boxplot(outliers = FALSE) + 
  labs(x = "", 
       y = NULL, 
       title = "Boxplot of Species vs Weight (g)",
       subtitle = "Types of Rodents") +
  coord_flip()

#https://stackoverflow.com/questions/76543808/how-to-flip-geom-boxplot-and-rescale-axis

#This code came from lab 2 question 16
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarise(mean_score = mean(percent_failed_cur)) |>
  arrange(desc(mean_score)) |>
  slice(c(1, n()))

#This code cem from lab 3 question 11

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

teacher_evals_clean |>
  summarise(across(.cols = course_id:teacher_id,
                   .fns = ~ n_distinct(.x))) 

#This code came from lab 3 question 6
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

teacher_evals_clean |>
  select(academic_degree,
         seniority,
         sex,
         teacher_id) |>
  group_by(sex,
           academic_degree) |>
  summarise(mean_seniority = mean(seniority),
            num_teachers = n_distinct(teacher_id),
            .groups = "drop")

#This code came from lab 3 question 8
```

-   Example 2

```{r}
#| label: dvs-6-2

teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarise(mean_score = mean(SET_score_avg)) |>
  arrange(desc(mean_score)) |>
  slice(c(1, n()))

#This code came from lab 3 question 9
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
